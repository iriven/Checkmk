---
- name: CHECKMK CONNECTIONS DETAILS
  block:
    - name: Initializing connections collection container
      ansible.builtin.set_fact:
        cmkconnections: "{{ cmkconnections| combine({ 'pattern': '^'+ cmkAgent.region + '_' + cmkAgent.envalias|lower  + '*' }) }}"

    - name: Retrieving known connections list
      local_action:
        module: uri
        url: "{{ cmkAgent.config.apiurl }}/domain-types/site_connection/collections/all"
        method: GET
        headers:
          Content-Type: application/json
          Accept: application/json
          Authorization: "Bearer {{ cmkAgent.config.apiuser }} {{ cmkAgent.config.apikey }}"
      register: cnxResponse
      failed_when: cnxResponse.status >= 400

    - name: Generating host target connection pool
      ansible.builtin.set_fact:
        cmkconnections: "{{ cmkconnections|combine({ 'pool': (cmkconnections.pool|default([]) + [ item.id ])|unique if item.id is regex(cmkconnections.pattern) and not(item.extensions.status_connection.disable_in_status_gui|bool) else cmkconnections.pool|default([]) }) }}"
      with_items: "{{cnxResponse.json.value}}"
      loop_control:
        label: "Site id: {{ item.id if item.id is regex(cmkconnections.pattern) and not(item.extensions.status_connection.disable_in_status_gui|bool) else item.id + ' Ignored !'}}"
      when:
        - cnxResponse is defined and cnxResponse.status < 400
        - cmkconnections is defined and cmkconnections.pattern|length > 0

    - name: Gathering details on each link in the connection pool
      local_action:
        module: uri
        url: "{{ cmkAgent.config.apiurl }}/objects/site_connection/{{ item|lower }}"
        method: GET
        headers:
          Content-Type: application/json
          Accept: application/json
          Authorization: "Bearer {{ cmkAgent.config.apiuser }} {{ cmkAgent.config.apikey }}"
      register: cnxDetailsResponse
      with_items: "{{cmkconnections.pool}}"
      loop_control:
        label: "Retrieving stats on: {{ item }} site"
      failed_when: cnxDetailsResponse.status >= 400
      when:
        - cmkconnections is defined and cmkconnections.pool|length > 0

    - name: Retrieving monitoring host name for each link in the active connection pool
      ansible.builtin.set_fact:
        cmkconnections: "{{ cmkconnections|combine({ 'proxies': (cmkconnections.proxies|default([]) + [{ 'site': item.item, 'host': item.json['extensions']['status_connection']['connection']['host'] }])|unique }) }}"
      with_items: "{{cnxDetailsResponse.results}}"
      loop_control:
        label: "Retrieving instance hostname for: {{ item.item }}"
      when:
        - cnxDetailsResponse.results is defined and cnxDetailsResponse.results|length > 0

    - name: Gathering Agent Receiver port for each link in the active connection pool
      ansible.builtin.shell: |
        set timeout 60
        omd config "{{ item.site|lower }}" show|grep -i 'RECEIVER_PORT'|awk -F':' '{print $NF}'| sed 's/[ ][ ]*//g'
      register: cnxReceiverport
      failed_when: cnxReceiverport.rc > 0
      delegate_to: "{{item.host}}"
      with_items: "{{cmkconnections.proxies}}"
      loop_control:
        label: "Retrieving Agent Receiver port for: {{ item.site|lower }}"
      when:
        - cmkconnections is defined and cmkconnections.proxies|length > 0

    - name: Retrieving agents count for each link in the active connection pool
      ansible.builtin.shell: |
        set timeout 30
        su -c 'cmk -l' -l {{ item.site }}
      register: cnxAgents
      delegate_to: "{{item.host}}"
      with_items: "{{cmkconnections.proxies}}"
      loop_control:
        label: "Retrieving monitored hosts for '{{ item.site }}' site"
      when:
        - cmkconnections is defined and cmkconnections.proxies|length > 0

    - name: Populating previous result into the connections collection container
      ansible.builtin.set_fact:
        cmkconnections:  >-
         {{ cmkconnections|combine({ 'activelink': item.0|combine({ 'agents': item.1.stdout_lines,
              'agents_count': item.1.stdout_lines|length,
              'recvport': item.2.stdout
              })
            })
          if cmkconnections.activelink is not defined or
          cmkAgent.hostname in item.1.stdout_lines or
          (
              ( cmkconnections.activelink.agents_count|int > item.1.stdout_lines|length|int ) and
              (cmkAgent.hostname not in cmkconnections.activelink.agents)
          )
          else
          cmkconnections|combine({'activelink': cmkconnections.activelink })
         }}

      loop_control:
        label: "Populating receiver port for: {{ item.0.site }}"
      with_together:
        - "{{ cmkconnections.proxies }}"
        - "{{ cnxAgents.results }}"
        - "{{ cnxReceiverport.results }}"
      vars:
        cmkEnableTlsEncrytion:  false
      when:
        - cnxAgents is defined and cnxAgents.results|length > 0
        - cmkconnections is defined and cmkconnections.proxies|length > 0
        - cnxReceiverport is defined and cnxReceiverport.results|length > 0


    # - name: Print return information from the previous task
    #   ansible.builtin.debug:
    #     var: "{{item}}"
    #   loop:
    #     - cmkAgent
    #     - cmkconnections

  when:
    - dburl is defined and dburl|length >0
    - dbtoken is defined and dbtoken|length >0
    - DBQuery is defined and DBQuery.status < 400 and DBQuery.json|length >0
    - cmkAgent is defined and cmkAgent.config|length > 0
  vars:
    cmkconnections: {}


- name: REGISTER NEW CHECKMK AGENT
  block:
    - name: Checking current Agent TLS encryption and compression Capabilities
      ansible.builtin.shell: |
        set timeout 60
        type cmk-agent-ctl && exit
      register: cmkDaemon
      failed_when:  cmkDaemon.rc|int not in [ 0, 1 ]

    - name: Populating current Agent TLS encryption and compression Status into the target connections objects
      ansible.builtin.set_fact:
        cmkAgent: >-
         {{ cmkAgent|combine({ 'config': cmkAgent.config | combine({ 'enable_encrytion':  true if cmkDaemon.rc|int == 0 else false }) }) }}
      when:
        - cmkDaemon is defined

    - name: Ensure Agent wato config folder exists.
      file:
        path: "{{cmkAgent.config.watopath + '/' + cmkAgent.config.dstfolder }}"
        state: directory
        owner:  "{{ cmkAgent.config.mainsite }}"
        group:  "{{ cmkAgent.config.mainsite }}"
        mode: 0775
        recurse: yes
      delegate_to: "{{cmkAgent.config.server}}"

    - name: Adding new host to the Checkmk monitoring system
      local_action:
        module: uri
        url: "{{ cmkAgent.config.apiurl }}/domain-types/host_config/collections/all"
        method: POST
        headers:
          Content-Type: application/json
          Accept: application/json
          Authorization: "Bearer {{ cmkAgent.config.apiuser }} {{ cmkAgent.config.apikey }}"
        body_format: json
        body:
          host_name:          "{{ cmkAgent.hostname|lower }}"
          folder:             "/{{ cmkAgent.config.dstfolder }}"
          attributes:
            site:             "{{ cmkconnections.activelink.site|lower }}"
            ipaddress:        "{{ cmkAgent.ipaddress }}"
            tag_infra:        "{{ cmkAgent.infra|lower }}"
            tag_environment:  "{{ cmkAgent.environment|lower }}"
            tag_area :        "{{ cmkAgent.region|lower }}"
            tag_criticality:  "{{ cmkAgent.envalias|lower }}"
            tag_hw_type:      "{{ cmkAgent.systemtype|lower }}"
            tag_stretch:      "{{ cmkAgent.stretch|lower}}"
            tag_perimeter:    "{{ cmkAgent.scope|lower }}"
            tag_os:           "{{ cmkAgent.osfamily|lower }}"
            labels:
              site:            "{{ cmkconnections.activelink.site|lower }}"
              env:             "{{ cmkAgent.environment|lower }}"
              area:            "{{ cmkAgent.region|lower }}"
              serial:          "{{ cmkAgent.serial|lower }}"
              country:         "{{ cmkAgent.country|lower }}"
              stretch:         "{{ cmkAgent.stretch|lower}}"
              hw_type:         "{{ cmkAgent.systemtype|lower }}"
              vm_type:         "{{ cmkAgent.vmtype|lower }}"
              infra:           "{{ cmkAgent.infra|lower }}"
              fqdn:            "{{ cmkAgent.fqdn }}"
              ipaddress:       "{{ cmkAgent.ipaddress }}"
              perimeter:       "{{ cmkAgent.scope|lower }}"
              datacenter:      "{{ cmkAgent.datacenter|lower }}"
              manufacturer:    "{{ cmkAgent.vendor|lower }}"
              application:     "{{ cmkAgent.application|lower }}"
              os_family:       "{{ cmkAgent.osfamily|lower }}"
              ecosystem:       "{{ cmkAgent.ecosystem|lower }}"
              model:           "{{ cmkAgent.model|lower }}"
              networkip:       "{{ cmkAgent.networkip|lower }}"
              netmask:         "{{ cmkAgent.netmask|lower }}"
              networkid:       "{{ cmkAgent.vlanid|lower }}"
              networkname:     "{{ cmkAgent.networkname|lower }}"
              cib_department:  "{{ cmkAgent.cibdepartement|lower}}"
              cib_supportgroup:    "{{ cmkAgent.cibsupportgroup|lower }}"
              itg_assgmt_group:    "{{ cmkAgent.itgassgmtgroup|lower }}"
              itg_department:      "{{ cmkAgent.itgdepartement|lower }}"
              itg_mgmt_group:      "{{ cmkAgent.itgmgmtgroup|lower }}"
              itg_supportgroup:    "{{ cmkAgent.itgsupportgroup|lower }}"
              folder:              "{{ '/' + cmkAgent.config.dstfolder }}"
      register: registrationResponse
      failed_when: ((registrationResponse.status  >= 400 ) and not (registrationResponse.json.fields.host_name|default() is search ("already exists.")))
      changed_when: registrationResponse.status  < 400



    - name: Execute a service discovery on new Added Hosts"
      local_action:
        module: uri
        url: "{{ cmkAgent.config.apiurl }}/domain-types/service_discovery_run/actions/start/invoke"
        method: POST
        headers:
          Content-Type: application/json
          Accept: application/json
          Authorization: "Bearer {{ cmkAgent.config.apiuser }} {{ cmkAgent.config.apikey }}"
        body_format: json
        body:
          host_name: "{{ cmkAgent.hostname|lower }}"
          mode: "fix_all"
      register: DiscoveryResponse
      failed_when: DiscoveryResponse.status >= 400
      when: ((registrationResponse.status  < 400 ) or (registrationResponse.json.fields.host_name|default() is search ("already exists.")))


    - name: Activating all pending changes
      local_action:
        module: uri
        url:  "{{ cmkAgent.config.apiurl }}/domain-types/activation_run/actions/activate-changes/invoke"
        method: POST
        headers:
          Content-Type: application/json
          Accept: application/json
          If-Match: "*"
          Authorization: "Bearer {{ cmkAgent.config.apiuser }} {{ cmkAgent.config.apikey }}"
        body_format: json
        body:
          redirect: "false"
          sites:
            - "{{ cmkconnections.activelink.site|lower }}"
          force_foreign_changes: "true"
      register: activationResponse
      failed_when: activationResponse.status >= 400 and activationResponse.status != 422
      when: DiscoveryResponse.status < 400
      run_once: 'true'

    - name: Disable Scheduled Registration whenever it exists.
      ansible.builtin.cron:
        name: "CheckMK Agent AutoInstall"
        cron_file: ansible_checkMK-agent-autoInstall-{{ cmkAgent.hostname|lower }}
        state: absent
      become: true
      delegate_to: localhost

    - name: Enable TLS communication between Agent and checkmk Instance
      ansible.builtin.shell: |
        set timeout 60
        cmk-agent-ctl register --trust-cert --hostname "{{ cmkAgent.hostname|lower }}" --server "{{ cmkconnections.activelink.host }}:{{cmkconnections.activelink.recvport}}" --site "{{ cmkconnections.activelink.site|lower }}" --user "{{ cmkAgent.config.admuser }}" --password "{{ cmkAgent.config.admpasswd }}"
      register: agentRegistration
      # until: agentRegistration.rc == 0
      # retries: 10
      # delay: 6
      when:
        - cmkAgent.config.enable_encrytion is defined and cmkAgent.config.enable_encrytion|bool
        - activationResponse.status < 400 or activationResponse.status == 422

    # - name: Print return information from the previous task
    #   ansible.builtin.debug:
    #     var: "{{item}}"
    #   loop:
    #     - cmkAgent
    #     - cmkconnections.activelink

  when:
    - dburl is defined and dburl|length >0
    - dbtoken is defined and dbtoken|length >0
    - DBQuery is defined and DBQuery.status < 400 and DBQuery.json|length >0
    - cmkAgent is defined and cmkAgent.config|length > 0
    - cmkconnections is defined and cmkconnections.activelink|length > 0


